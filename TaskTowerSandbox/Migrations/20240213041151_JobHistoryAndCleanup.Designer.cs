// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskTowerSandbox.Database;

#nullable disable

namespace TaskTowerSandbox.Migrations
{
    [DbContext(typeof(TaskTowerDbContext))]
    [Migration("20240213041151_JobHistoryAndCleanup")]
    partial class JobHistoryAndCleanup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskTowerSandbox.Domain.EnqueuedJobs.EnqueuedJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.HasKey("Id")
                        .HasName("pk_enqueued_jobs");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasDatabaseName("ix_enqueued_jobs_job_id");

                    b.ToTable("enqueued_jobs", (string)null);
                });

            modelBuilder.Entity("TaskTowerSandbox.Domain.RunHistories.RunHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("Details")
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<DateTimeOffset>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_run_histories");

                    b.HasIndex("JobId")
                        .HasDatabaseName("ix_run_histories_job_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_run_histories_status");

                    b.ToTable("run_histories", (string)null);
                });

            modelBuilder.Entity("TaskTowerSandbox.Domain.TaskTowerJob.TaskTowerJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("Deadline")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deadline");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fingerprint");

                    b.Property<int?>("MaxRetries")
                        .HasColumnType("integer")
                        .HasColumnName("max_retries");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<string>("Queue")
                        .HasColumnType("text")
                        .HasColumnName("queue");

                    b.Property<DateTimeOffset?>("RanAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ran_at");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<DateTimeOffset>("RunAfter")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("run_after");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_jobs");

                    b.HasIndex("RunAfter")
                        .HasDatabaseName("ix_jobs_run_after");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_jobs_status");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("TaskTowerSandbox.Domain.EnqueuedJobs.EnqueuedJob", b =>
                {
                    b.HasOne("TaskTowerSandbox.Domain.TaskTowerJob.TaskTowerJob", "Job")
                        .WithOne("EnqueuedJob")
                        .HasForeignKey("TaskTowerSandbox.Domain.EnqueuedJobs.EnqueuedJob", "JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_enqueued_jobs_jobs_job_id");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TaskTowerSandbox.Domain.TaskTowerJob.TaskTowerJob", b =>
                {
                    b.Navigation("EnqueuedJob");
                });
#pragma warning restore 612, 618
        }
    }
}
